'use strict';

var yaml = require('yaml');
var config = require('./config-d7029aa8.cjs.js');
var configLoader = require('@backstage/config-loader');
require('@backstage/config');
require('./index-4757258f.cjs.js');
require('commander');
require('chalk');
require('fs-extra');
require('semver');
require('@backstage/cli-common');
require('@backstage/errors');
require('@manypkg/get-packages');
require('./PackageGraph-5cd8b6d9.cjs.js');
require('path');
require('child_process');
require('util');
require('./Lockfile-bc3a8337.cjs.js');
require('@yarnpkg/parsers');
require('@yarnpkg/lockfile');
require('minimatch');
require('./yarn-6cd89e16.cjs.js');
require('./run-3445beee.cjs.js');

var schema = async (opts) => {
  const { schema } = await config.loadCliConfig({
    args: [],
    fromPackage: opts.package,
    mockEnv: true
  });
  const merged = configLoader.mergeConfigSchemas(
    schema.serialize().schemas.map(
      (_) => _.value
    )
  );
  merged.title = "Application Configuration Schema";
  merged.description = "This is the schema describing the structure of the app-config.yaml configuration file.";
  if (opts.format === "json") {
    process.stdout.write(`${JSON.stringify(merged, null, 2)}
`);
  } else {
    process.stdout.write(`${yaml.stringify(merged)}
`);
  }
};

exports["default"] = schema;
//# sourceMappingURL=schema-bd6ef683.cjs.js.map
