/**
 * The scaffolder-node module for `@backstage/plugin-scaffolder-backend`.
 *
 * @packageDocumentation
 */

/// <reference types="node" />

import { ExtensionPoint } from '@backstage/backend-plugin-api';
import { JsonObject } from '@backstage/types';
import { JsonValue } from '@backstage/types';
import { Logger } from 'winston';
import { Schema } from 'jsonschema';
import { TemplateInfo } from '@backstage/plugin-scaffolder-common';
import { UserEntity } from '@backstage/catalog-model';
import { Writable } from 'stream';

/**
 * ActionContext is passed into scaffolder actions.
 * @public
 */
export declare type ActionContext<TInput extends JsonObject> = {
    logger: Logger;
    logStream: Writable;
    secrets?: TaskSecrets;
    workspacePath: string;
    input: TInput;
    output(name: string, value: JsonValue): void;
    /**
     * Creates a temporary directory for use by the action, which is then cleaned up automatically.
     */
    createTemporaryDirectory(): Promise<string>;
    templateInfo?: TemplateInfo;
    /**
     * Whether this action invocation is a dry-run or not.
     * This will only ever be true if the actions as marked as supporting dry-runs.
     */
    isDryRun?: boolean;
    /**
     * The user which triggered the action.
     */
    user?: {
        /**
         * The decorated entity from the Catalog
         */
        entity?: UserEntity;
        /**
         * An entity ref for the author of the task
         */
        ref?: string;
    };
};

/**
 * This function is used to create new template actions to get type safety.
 *
 * @public
 */
export declare const createTemplateAction: <TInput extends JsonObject>(templateAction: TemplateAction<TInput>) => TemplateAction<TInput>;

/**
 * Extension point for managing scaffolder actions.
 *
 * @alpha
 */
export declare interface ScaffolderActionsExtensionPoint {
    addActions(...actions: TemplateAction<any>[]): void;
}

/**
 * Extension point for managing scaffolder actions.
 *
 * @alpha
 */
export declare const scaffolderActionsExtensionPoint: ExtensionPoint<ScaffolderActionsExtensionPoint>;

/**
 * TaskSecrets
 *
 * @public
 */
export declare type TaskSecrets = Record<string, string> & {
    backstageToken?: string;
};

/** @public */
export declare type TemplateAction<TInput extends JsonObject> = {
    id: string;
    description?: string;
    examples?: {
        description: string;
        example: string;
    }[];
    supportsDryRun?: boolean;
    schema?: {
        input?: Schema;
        output?: Schema;
    };
    handler: (ctx: ActionContext<TInput>) => Promise<void>;
};

export { }
