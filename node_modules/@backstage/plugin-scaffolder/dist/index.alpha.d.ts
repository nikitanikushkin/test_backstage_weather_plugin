/**
 * The Backstage plugin that helps you create new things
 *
 * @packageDocumentation
 */

/// <reference types="react" />

import { ApiHolder } from '@backstage/core-plugin-api';
import { ApiRef } from '@backstage/core-plugin-api';
import { BackstagePlugin } from '@backstage/core-plugin-api';
import { ComponentType } from 'react';
import { createScaffolderFieldExtension as createScaffolderFieldExtension_2 } from '@backstage/plugin-scaffolder-react';
import { createScaffolderLayout as createScaffolderLayout_2 } from '@backstage/plugin-scaffolder-react';
import { CustomFieldExtensionSchema as CustomFieldExtensionSchema_2 } from '@backstage/plugin-scaffolder-react';
import { CustomFieldValidator as CustomFieldValidator_2 } from '@backstage/plugin-scaffolder-react';
import { DiscoveryApi } from '@backstage/core-plugin-api';
import { Entity } from '@backstage/catalog-model';
import { ExternalRouteRef } from '@backstage/core-plugin-api';
import { FetchApi } from '@backstage/core-plugin-api';
import { FieldExtensionComponent as FieldExtensionComponent_2 } from '@backstage/plugin-scaffolder-react';
import { FieldExtensionComponentProps as FieldExtensionComponentProps_2 } from '@backstage/plugin-scaffolder-react';
import { FieldExtensionOptions as FieldExtensionOptions_2 } from '@backstage/plugin-scaffolder-react';
import { FieldValidation } from '@rjsf/core';
import { FormProps as FormProps_2 } from '@backstage/plugin-scaffolder-react';
import type { FormProps as FormProps_3 } from '@rjsf/core-v5';
import { IdentityApi } from '@backstage/core-plugin-api';
import { JsonObject } from '@backstage/types';
import { LayoutOptions as LayoutOptions_2 } from '@backstage/plugin-scaffolder-react';
import { LayoutTemplate as LayoutTemplate_2 } from '@backstage/plugin-scaffolder-react';
import { ListActionsResponse as ListActionsResponse_2 } from '@backstage/plugin-scaffolder-react';
import { LogEvent as LogEvent_2 } from '@backstage/plugin-scaffolder-react';
import { Observable } from '@backstage/types';
import { PathParams } from '@backstage/core-plugin-api';
import { PropsWithChildren } from 'react';
import { default as React_2 } from 'react';
import { ReactNode } from 'react';
import { RouteRef } from '@backstage/core-plugin-api';
import { ScaffolderApi as ScaffolderApi_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderDryRunOptions as ScaffolderDryRunOptions_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderDryRunResponse as ScaffolderDryRunResponse_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderGetIntegrationsListOptions as ScaffolderGetIntegrationsListOptions_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderGetIntegrationsListResponse as ScaffolderGetIntegrationsListResponse_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderOutputLink } from '@backstage/plugin-scaffolder-react';
import { ScaffolderScaffoldOptions as ScaffolderScaffoldOptions_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderScaffoldResponse as ScaffolderScaffoldResponse_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderStreamLogsOptions as ScaffolderStreamLogsOptions_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderTask as ScaffolderTask_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderTaskOutput as ScaffolderTaskOutput_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderTaskStatus as ScaffolderTaskStatus_2 } from '@backstage/plugin-scaffolder-react';
import { ScaffolderUseTemplateSecrets as ScaffolderUseTemplateSecrets_2 } from '@backstage/plugin-scaffolder-react';
import { ScmIntegrationRegistry } from '@backstage/integration';
import { SubRouteRef } from '@backstage/core-plugin-api';
import { TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { TemplateParameterSchema as TemplateParameterSchema_2 } from '@backstage/plugin-scaffolder-react';
import { UiSchema } from '@rjsf/utils';
import { z } from 'zod';

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderFieldExtension} instead as this has now been moved.
 */
export declare const createScaffolderFieldExtension: typeof createScaffolderFieldExtension_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderLayout} instead as this has now been moved.
 */
export declare const createScaffolderLayout: typeof createScaffolderLayout_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldExtensionSchema} instead as this has now been moved.
 */
export declare type CustomFieldExtensionSchema = CustomFieldExtensionSchema_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldValidator} instead as this has now been moved.
 */
export declare type CustomFieldValidator<TReturnFieldData> = CustomFieldValidator_2<TReturnFieldData>;

/**
 * The field extension for selecting a name for a new Entity in the Catalog.
 *
 * @public
 */
export declare const EntityNamePickerFieldExtension: FieldExtensionComponent_2<string, {}>;

/**
 * A field extension for selecting an Entity that exists in the Catalog.
 *
 * @public
 */
export declare const EntityPickerFieldExtension: FieldExtensionComponent_2<string, {
defaultKind?: string | undefined;
defaultNamespace?: string | false | undefined;
allowedKinds?: string[] | undefined;
allowArbitraryValues?: boolean | undefined;
catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;

/**
 * @public
 */
export declare const EntityPickerFieldSchema: FieldSchema<string, {
defaultKind?: string | undefined;
defaultNamespace?: string | false | undefined;
allowedKinds?: string[] | undefined;
allowArbitraryValues?: boolean | undefined;
catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;

/**
 * The input props that can be specified under `ui:options` for the
 * `EntityPicker` field extension.
 *
 * @public
 */
export declare type EntityPickerUiOptions = typeof EntityPickerFieldSchema.uiOptionsType;

/**
 * EntityTagsPickerFieldExtension
 * @public
 */
export declare const EntityTagsPickerFieldExtension: FieldExtensionComponent_2<string[], {
showCounts?: boolean | undefined;
kinds?: string[] | undefined;
helperText?: string | undefined;
}>;

/**
 * @public
 */
export declare const EntityTagsPickerFieldSchema: FieldSchema<string[], {
showCounts?: boolean | undefined;
kinds?: string[] | undefined;
helperText?: string | undefined;
}>;

/**
 * The input props that can be specified under `ui:options` for the
 * `EntityTagsPicker` field extension.
 *
 * @public
 */
export declare type EntityTagsPickerUiOptions = typeof EntityTagsPickerFieldSchema.uiOptionsType;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponent} instead as this has now been moved.
 */
export declare type FieldExtensionComponent<_TReturnValue, _TInputProps> = FieldExtensionComponent_2<_TReturnValue, _TInputProps>;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponentProps} instead as this has now been moved.
 */
export declare type FieldExtensionComponentProps<TFieldReturnValue, TUiOptions extends {} = {}> = FieldExtensionComponentProps_2<TFieldReturnValue, TUiOptions>;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionOptions} instead as this has now been moved.
 */
export declare type FieldExtensionOptions = FieldExtensionOptions_2;

/**
 * @public
 * FieldSchema encapsulates a JSONSchema7 along with the
 * matching FieldExtensionComponentProps type for a field extension.
 */
export declare interface FieldSchema<TReturn, TUiOptions> {
    readonly schema: CustomFieldExtensionSchema_2;
    readonly type: FieldExtensionComponentProps_2<TReturn, TUiOptions>;
    readonly uiOptionsType: TUiOptions;
}

/**
 * Any `@rjsf/core` form properties that are publicly exposed to the `NextScaffolderPage`
 *
 * @alpha
 * @deprecated use the import from {@link @backstage/plugin-scaffolder-react/alpha#FormProps} instead
 */
export declare type FormProps = Pick<FormProps_3, 'transformErrors' | 'noHtml5Validate'>;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutOptions} instead as this has now been moved.
 */
export declare type LayoutOptions = LayoutOptions_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutTemplate} instead as this has now been moved.
 */
export declare type LayoutTemplate = LayoutTemplate_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ListActionsResponse} instead as this has now been moved.
 */
export declare type ListActionsResponse = ListActionsResponse_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LogEvent} instead as this has now been moved.
 */
export declare type LogEvent = LogEvent_2;

/**
 * @public
 * Utility function to convert zod return and UI options schemas to a
 * CustomFieldExtensionSchema with FieldExtensionComponentProps type inference
 */
export declare function makeFieldSchemaFromZod<TReturnSchema extends z.ZodType, TUiOptionsSchema extends z.ZodType = z.ZodType<any, any, {}>>(returnSchema: TReturnSchema, uiOptionsSchema?: TUiOptionsSchema): FieldSchema<TReturnSchema extends z.ZodType<any, any, infer IReturn> ? IReturn : never, TUiOptionsSchema extends z.ZodType<any, any, infer IUiOptions> ? IUiOptions : never>;

/** @alpha */
export declare const nextRouteRef: RouteRef<undefined>;

/**
 * The Props for the Scaffolder Router
 *
 * @alpha
 */
export declare type NextRouterProps = {
    components?: {
        TemplateCardComponent?: React_2.ComponentType<{
            template: TemplateEntityV1beta3;
        }>;
        TaskPageComponent?: React_2.ComponentType<{}>;
        TemplateOutputsComponent?: React_2.ComponentType<{
            output?: ScaffolderTaskOutput_2;
        }>;
    };
    groups?: TemplateGroupFilter[];
    FormProps?: FormProps_2;
    contextMenu?: {
        /** Whether to show a link to the template editor */
        editor?: boolean;
        /** Whether to show a link to the actions documentation */
        actions?: boolean;
        /** Whether to show a link to the tasks page */
        tasks?: boolean;
    };
};

/**
 * @alpha
 * The Router and main entrypoint to the Alpha Scaffolder plugin.
 */
export declare const NextScaffolderPage: (props: PropsWithChildren<NextRouterProps>) => JSX.Element;

/** @alpha */
export declare const nextScaffolderTaskRouteRef: SubRouteRef<PathParams<"/tasks/:taskId">>;

/** @alpha */
export declare const nextSelectedTemplateRouteRef: SubRouteRef<PathParams<"/templates/:namespace/:templateName">>;

/**
 * A field extension to show all the Entities that are owned by the current logged-in User for use in templates.
 *
 * @public
 */
export declare const OwnedEntityPickerFieldExtension: FieldExtensionComponent_2<string, {
defaultKind?: string | undefined;
defaultNamespace?: string | false | undefined;
allowedKinds?: string[] | undefined;
allowArbitraryValues?: boolean | undefined;
}>;

/**
 * @public
 */
export declare const OwnedEntityPickerFieldSchema: FieldSchema<string, {
defaultKind?: string | undefined;
defaultNamespace?: string | false | undefined;
allowedKinds?: string[] | undefined;
allowArbitraryValues?: boolean | undefined;
}>;

/**
 * The input props that can be specified under `ui:options` for the
 * `OwnedEntityPicker` field extension.
 *
 * @public
 */
export declare type OwnedEntityPickerUiOptions = typeof OwnedEntityPickerFieldSchema.uiOptionsType;

/**
 * A field extension for picking users and groups out of the Catalog.
 *
 * @public
 */
export declare const OwnerPickerFieldExtension: FieldExtensionComponent_2<string, {
defaultNamespace?: string | false | undefined;
allowedKinds?: string[] | undefined;
allowArbitraryValues?: boolean | undefined;
catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;

/**
 * @public
 */
export declare const OwnerPickerFieldSchema: FieldSchema<string, {
defaultNamespace?: string | false | undefined;
allowedKinds?: string[] | undefined;
allowArbitraryValues?: boolean | undefined;
catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;

/**
 * The input props that can be specified under `ui:options` for the
 * `OwnerPicker` field extension.
 *
 * @public
 */
export declare type OwnerPickerUiOptions = typeof OwnerPickerFieldSchema.uiOptionsType;

/**
 * The validation function for the `repoUrl` that is returned from the
 * field extension. Ensures that you have all the required fields filled for
 * the different providers that exist.
 *
 * @public
 */
export declare const repoPickerValidation: (value: string, validation: FieldValidation, context: {
    apiHolder: ApiHolder;
}) => void;

/**
 * The field extension which provides the ability to select a RepositoryUrl.
 * Currently, this is an encoded URL that looks something like the following `github.com?repo=myRepoName&owner=backstage`.
 *
 * @public
 */
export declare const RepoUrlPickerFieldExtension: FieldExtensionComponent_2<string, {
allowedHosts?: string[] | undefined;
allowedOrganizations?: string[] | undefined;
allowedOwners?: string[] | undefined;
allowedProjects?: string[] | undefined;
allowedRepos?: string[] | undefined;
requestUserCredentials?: {
additionalScopes?: {
azure?: string[] | undefined;
github?: string[] | undefined;
gitlab?: string[] | undefined;
bitbucket?: string[] | undefined;
gerrit?: string[] | undefined;
} | undefined;
secretsKey: string;
} | undefined;
}>;

/**
 * @public
 */
export declare const RepoUrlPickerFieldSchema: FieldSchema<string, {
allowedHosts?: string[] | undefined;
allowedOrganizations?: string[] | undefined;
allowedOwners?: string[] | undefined;
allowedProjects?: string[] | undefined;
allowedRepos?: string[] | undefined;
requestUserCredentials?: {
additionalScopes?: {
azure?: string[] | undefined;
github?: string[] | undefined;
gitlab?: string[] | undefined;
bitbucket?: string[] | undefined;
gerrit?: string[] | undefined;
} | undefined;
secretsKey: string;
} | undefined;
}>;

/**
 * The input props that can be specified under `ui:options` for the
 * `RepoUrlPicker` field extension.
 *
 * @public
 */
export declare type RepoUrlPickerUiOptions = typeof RepoUrlPickerFieldSchema.uiOptionsType;

/**
 * The props for the Last Step in scaffolder template form.
 * Which represents the summary of the input provided by the end user.
 *
 * @public
 */
export declare type ReviewStepProps = {
    disableButtons: boolean;
    formData: JsonObject;
    handleBack: () => void;
    handleReset: () => void;
    handleCreate: () => void;
    steps: {
        uiSchema: UiSchema;
        mergedSchema: JsonObject;
        schema: JsonObject;
    }[];
};

/**
 * @public
 * @deprecated use import from `{@link @backstage/plugin-scaffolder#scaffolderPlugin}.routes.root` instead.
 */
export declare const rootRouteRef: RouteRef<undefined>;

/**
 * The props for the entrypoint `ScaffolderPage` component the plugin.
 * @public
 */
export declare type RouterProps = {
    components?: {
        ReviewStepComponent?: ComponentType<ReviewStepProps>;
        TemplateCardComponent?: ComponentType<{
            template: TemplateEntityV1beta3;
        }> | undefined;
        TaskPageComponent?: ComponentType<{}>;
    };
    groups?: Array<{
        title?: React_2.ReactNode;
        filter: (entity: Entity) => boolean;
    }>;
    defaultPreviewTemplate?: string;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
    /**
     * Options for the context menu on the scaffolder page.
     */
    contextMenu?: {
        /** Whether to show a link to the template editor */
        editor?: boolean;
        /** Whether to show a link to the actions documentation */
        actions?: boolean;
    };
};

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderApi} instead as this has now been moved.
 */
export declare type ScaffolderApi = ScaffolderApi_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#scaffolderApiRef} instead as this has now been moved.
 */
export declare const scaffolderApiRef: ApiRef<ScaffolderApi_2>;

/**
 * An API to interact with the scaffolder backend.
 *
 * @public
 */
export declare class ScaffolderClient implements ScaffolderApi_2 {
    private readonly discoveryApi;
    private readonly scmIntegrationsApi;
    private readonly fetchApi;
    private readonly identityApi?;
    private readonly useLongPollingLogs;
    constructor(options: {
        discoveryApi: DiscoveryApi;
        fetchApi: FetchApi;
        identityApi?: IdentityApi;
        scmIntegrationsApi: ScmIntegrationRegistry;
        useLongPollingLogs?: boolean;
    });
    listTasks(options: {
        filterByOwnership: 'owned' | 'all';
    }): Promise<{
        tasks: ScaffolderTask_2[];
    }>;
    getIntegrationsList(options: ScaffolderGetIntegrationsListOptions_2): Promise<ScaffolderGetIntegrationsListResponse_2>;
    getTemplateParameterSchema(templateRef: string): Promise<TemplateParameterSchema_2>;
    scaffold(options: ScaffolderScaffoldOptions_2): Promise<ScaffolderScaffoldResponse_2>;
    getTask(taskId: string): Promise<ScaffolderTask_2>;
    streamLogs(options: ScaffolderStreamLogsOptions_2): Observable<LogEvent_2>;
    dryRun(options: ScaffolderDryRunOptions_2): Promise<ScaffolderDryRunResponse_2>;
    private streamLogsEventStream;
    private streamLogsPolling;
    listActions(): Promise<ListActionsResponse_2>;
}

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderDryRunOptions} instead as this has now been moved.
 */
export declare type ScaffolderDryRunOptions = ScaffolderDryRunOptions_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderDryRunResponse} instead as this has now been moved.
 */
export declare type ScaffolderDryRunResponse = ScaffolderDryRunResponse_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderFieldExtensions} instead as this has now been moved.
 */
export declare const ScaffolderFieldExtensions: ComponentType<    {
children?: ReactNode;
}>;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderGetIntegrationsListOptions} instead as this has now been moved.
 */
export declare type ScaffolderGetIntegrationsListOptions = ScaffolderGetIntegrationsListOptions_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderGetIntegrationsListResponse} instead as this has now been moved.
 */
export declare type ScaffolderGetIntegrationsListResponse = ScaffolderGetIntegrationsListResponse_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderLayouts} instead as this has now been moved.
 */
export declare const ScaffolderLayouts: ComponentType<    {}>;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderOutputlink} instead as this has now been moved.
 */
export declare type ScaffolderOutputlink = ScaffolderOutputLink;

/**
 * The Router and main entrypoint to the Scaffolder plugin.
 *
 * @public
 */
export declare const ScaffolderPage: (props: RouterProps) => JSX.Element;

/**
 * The main plugin export for the scaffolder.
 * @public
 */
export declare const scaffolderPlugin: BackstagePlugin<    {
root: RouteRef<undefined>;
selectedTemplate: SubRouteRef<PathParams<"/templates/:namespace/:templateName">>;
ongoingTask: SubRouteRef<PathParams<"/tasks/:taskId">>;
}, {
registerComponent: ExternalRouteRef<undefined, true>;
viewTechDoc: ExternalRouteRef<    {
name: string;
kind: string;
namespace: string;
}, true>;
}, {}>;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderScaffoldOptions} instead as this has now been moved.
 */
export declare type ScaffolderScaffoldOptions = ScaffolderScaffoldOptions_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderScaffoldResponse} instead as this has now been moved.
 */
export declare type ScaffolderScaffoldResponse = ScaffolderScaffoldResponse_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderStreamLogsOptions} instead as this has now been moved.
 */
export declare type ScaffolderStreamLogsOptions = ScaffolderStreamLogsOptions_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTask} instead as this has now been moved.
 */
export declare type ScaffolderTask = ScaffolderTask_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTaskOutput} instead as this has now been moved.
 */
export declare type ScaffolderTaskOutput = ScaffolderTaskOutput_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTaskStatus} instead as this has now been moved.
 */
export declare type ScaffolderTaskStatus = ScaffolderTaskStatus_2;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderUseTemplateSecrets} instead as this has now been moved.
 */
export declare type ScaffolderUseTemplateSecrets = ScaffolderUseTemplateSecrets_2;

/**
 * TaskPage for showing the status of the taskId provided as a param
 * @param loadingText - Optional loading text shown before a task begins executing.
 *
 * @public
 */
export declare const TaskPage: ({ loadingText }: TaskPageProps) => JSX.Element;

/**
 * TaskPageProps for constructing a TaskPage
 * @param loadingText - Optional loading text shown before a task begins executing.
 *
 * @public
 */
export declare type TaskPageProps = {
    loadingText?: string;
};

/**
 * @alpha
 */
export declare type TemplateGroupFilter = {
    title?: React_2.ReactNode;
    filter: (entity: Entity) => boolean;
};

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#TemplateParameterSchema} instead as this has now been moved.
 */
export declare type TemplateParameterSchema = TemplateParameterSchema_2;

/**
 * The component to select the `type` of `Template` that you will see in the table.
 *
 * @public
 */
export declare const TemplateTypePicker: () => JSX.Element | null;

/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#useTemplateSecrets} instead as this has now been moved.
 */
export declare const useTemplateSecrets: () => ScaffolderUseTemplateSecrets_2;

export { }
